ğŸ”· Character
PropriÃ©tÃ©s :

int Id

string Name

string Gender

string Hair

string EyeColor

string Beard

string Mouth

string Clothes

string Glasses

string Hat

bool IsVisible

Texture2D PortraitTexture

MÃ©thodes :

bool MatchesCriteria(string criteria, string value)

void Hide()

void Reveal()

ğŸ”· PortraitGenerator
PropriÃ©tÃ©s (internes) :

HashSet<string> usedCombinations

MÃ©thodes (static) :

List<Character> GenerateCharacters(List<string> names)

Character GenerateRandomCharacter(string name)

string RandomFrom(string folder)

Texture2D ComposeTexture(Character c)

ğŸ”· GameManager
PropriÃ©tÃ©s :

List<Character> AllCharacters

List<Character> RemainingCharacters

Character PlayerPortrait

Character OpponentPortrait

bool isPlayerTurn

int timesGuessed

MÃ©thodes :

void StartGame(List<string> names)

void AssignPortraits()

void AskQuestion(string criteria, string value)

void MakeGuess(Character guess)

void EliminatePortraits(string criteria, string value, bool keepMatching)

bool IsMyTurn()

void SwitchTurn()

void Restart()

void Quit()

ğŸ”· Board
MÃ©thodes :

void Display(List<Character> characters)

Character GetClickedCharacter(int mouseX, int mouseY)

ğŸ”· UIManager
MÃ©thodes (static) :

void DisplayQuestionInput()

void DisplayIncorrectGuess()

void DisplayWinScreen()

ğŸ”· AssetManager
PropriÃ©tÃ©s (internes) :

Dictionary<string, Texture2D> textures

MÃ©thodes (static) :

Texture2D LoadTexture(string path)

void UnloadAll()

ğŸ§© Relations clÃ©s Ã  reprÃ©senter dans ton diagramme :
GameManager utilise : Character, PortraitGenerator, Board, UIManager, AssetManager

Board affiche : Character

Character contient des attributs liÃ©s Ã  des assets (textures)

PortraitGenerator produit des Character

AssetManager fournit des Texture2D utilisÃ©s dans Character.PortraitTexture

Souhaites-tu que je te gÃ©nÃ¨re un diagramme UML visuel Ã  partir de Ã§a ?